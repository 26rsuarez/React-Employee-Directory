{"version":3,"sources":["utils/API.js","components/Container/index.js","components/Row/index.js","components/Wrapper/index.js","components/Filter/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Container","props","className","fluid","Row","first","last","email","state","Wrapper","Filter","htmlFor","onChange","handleInputChange","value","name","list","type","placeholder","id","Set","results","map","item","location","onClick","handleFormSubmit","data-value","App","original","filter","getEmployees","API","then","res","console","log","setState","data","catch","err","event","target","preventDefault","btnName","getAttribute","filterList","this","column","sorted","sort","a","b","filtered","result","unfiltered","style","minHeight","scope","sortEmployees","employee","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88023e57.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the GitHub Jobs API\r\n\r\nexport default {\r\n  requestUsers: function() {\r\n    return axios.get(\r\n      \"https://randomuser.me/api/?results=20&inc=name,email,location&nat=us\" \r\n    );\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Row(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.first}</td>\r\n      <td>{props.last}</td>\r\n      <td>{props.email}</td>\r\n      <td>{props.state}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nfunction Filter(props) {\r\n    return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"filter\">Filter:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"filter\"\r\n          list=\"states\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Filter by State\"\r\n          id=\"state\"\r\n        />\r\n        <datalist id=\"states\">\r\n          { [...new Set(props.results.map(item=>item.location.state))]\r\n          .map(item=>(<option value={item} key={item} />))\r\n          }\r\n            \r\n        </datalist>\r\n        <button type=\"submit\" onClick={props.handleFormSubmit} data-value=\"filter\" className=\"btn btn-success\">\r\n          Filter\r\n        </button>\r\n        <button type=\"submit\" onClick={props.handleFormSubmit} data-value=\"unfilter\" className=\"btn btn-danger\">\r\n          Remove Filter\r\n        </button>\r\n      </div>\r\n    </form>\r\n    \r\n        )\r\n}\r\n\r\nexport default Filter;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport API from \"./utils/API\"\r\n\r\nimport Container from \"./components/Container\";\r\nimport Row from \"./components/Row\";\r\nimport Wrapper  from \"./components/Wrapper\"\r\nimport Filter from \"./components/Filter\"\r\n\r\n\r\nclass App extends Component {\r\n  //the state are the employees\r\n  state = {\r\n    original: [],\r\n    results: [],\r\n    filter: \"\"\r\n  }\r\n\r\n  //check to see if employees are loaded\r\n  componentDidMount() {\r\n    this.getEmployees();\r\n  }\r\n\r\n  //employees are retrieved from the api call\r\n  getEmployees = () => {\r\n    API.requestUsers()\r\n    .then(res => {\r\n      console.log(res);\r\n      //the results and original both hold the employees in the state\r\n      this.setState({results: res.data.results,\r\n      original: res.data.results})})\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  sortEmployees (column) {\r\n    //sorts each column alphabetacally, if two employees have the same name it then looks at last name. then updates the state\r\n    if (column === \"first\") {\r\n      const sorted = this.state.results.sort((a, b) => (a.name.first > b.name.first) ? 1 : (a.name.first === b.name.first) ? ((a.name.last > b.name.last) ? 1 : -1) : -1 )\r\n      this.setState({results: sorted})\r\n    } else if(column === \"last\") {\r\n      const sorted = this.state.results.sort((a, b) => (a.name.last > b.name.last) ? 1 : (a.name.last === b.name.last) ? ((a.name.first > b.name.first) ? 1 : -1) : -1 )\r\n      this.setState({results: sorted})\r\n    } else if (column === \"email\"){\r\n      const sorted = this.state.results.sort((a, b) => (a.email > b.email) ? 1 : -1)\r\n      this.setState({results: sorted})\r\n    } else {\r\n      const sorted = this.state.results.sort((a, b) => (a.location.state > b.location.state) ? 1 : -1)\r\n      this.setState({results: sorted})\r\n    }\r\n      \r\n  }\r\n\r\n  filterList(state, btnName) {\r\n    //if the filter button is used the state changes by the filter, otherwise it goes back to the original\r\n    if (btnName === \"filter\") {\r\n      const filtered = this.state.results.filter(result => result.location.state === state);\r\n      console.log(filtered)\r\n      this.setState({results: filtered})\r\n    } else {\r\n      const unfiltered = this.state.original;\r\n      this.setState({results: unfiltered})\r\n    } \r\n  }\r\n\r\n  handleInputChange = event => {\r\n    this.setState({\r\n      filter: event.target.value\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    const btnName = event.target.getAttribute(\"data-value\")\r\n    this.filterList(this.state.filter, btnName)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Wrapper>\r\n        <Container style={{ minHeight: \"100vh\" }}>\r\n          <h1 className=\"text-center\">Directory of Employees</h1>\r\n          <Filter \r\n            value={this.state.filter}\r\n            handleInputChange={this.handleInputChange}\r\n            handleFormSubmit={this.handleFormSubmit}\r\n            results={this.state.results}\r\n          />\r\n          <table className=\"table table-striped\">\r\n            <thead>\r\n              <tr>\r\n              <th scope=\"col\">First<i className=\"fas fa-sort\" onClick={()=>this.sortEmployees(\"first\")}></i></th>\r\n              <th scope=\"col\">Last<i className=\"fas fa-sort\" onClick={()=>this.sortEmployees(\"last\")}></i></th>\r\n              <th scope=\"col\">Email<i className=\"fas fa-sort\" onClick={()=>this.sortEmployees(\"email\")}></i></th>\r\n              <th scope=\"col\">State<i className=\"fas fa-sort\" onClick={()=>this.sortEmployees(\"state\")}></i></th>\r\n              </tr>\r\n            </thead>\r\n          <tbody>\r\n            {this.state.results.map(employee => (\r\n              <Row \r\n                first={employee.name.first}\r\n                last={employee.name.last}\r\n                email={employee.email}\r\n                state={employee.location.state}\r\n              />\r\n            ))}\r\n          </tbody>\r\n    </table>\r\n  \r\n        </Container>\r\n        </Wrapper>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}